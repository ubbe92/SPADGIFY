syntax = "proto3"; /* default is proto2 */
option java_package = "proto";


// ----------------------------------------------------
// Service symbolizing the Messenger interface
// ----------------------------------------------------
service Node {
  rpc FindSuccessorWIKI (FindSuccessorRequestWIKI) returns (FindSuccessorReplyWIKI) {}
  rpc NotifyWIKI (NotifyRequestWIKI) returns (NotifyReplyWIKI) {}
  rpc PingNodeWIKI (PingNodeRequestWIKI) returns (PingNodeReplyWIKI) {}
  rpc GetPredecessorWIKI (GetPredecessorRequestWIKI) returns (GetPredecessorReplyWIKI) {}
  rpc SetPredecessorsSuccessorWIKI (SetPredecessorsSuccessorRequestWIKI) returns (SetPredecessorsSuccessorReplyWIKI) {}
  rpc SetSuccessorsPredecessorWIKI (SetSuccessorsPredecessorRequestWIKI) returns (SetSuccessorsPredecessorReplyWIKI) {}
}

service File {
  rpc Upload (stream FileChunk) returns (UploadStatus) {}
  rpc Download (DownloadRequest) returns (stream FileChunk) {}
  rpc Delete (DeleteRequest) returns (DeleteStatus) {}
  rpc ListAllSongs (ListAllSongsRequest) returns (ListAllSongsReply) {}

  rpc ListNodeSongs (ListNodeSongsRequest) returns (ListNodeSongsReply) {}
}

// ----------------------------------------------------
// Requests and replies definitions for Node service
// ----------------------------------------------------

// ----------------------------------------------------
message FindSuccessorRequestWIKI {
  uint64 id = 1;
}

message FindSuccessorReplyWIKI {
  ChordNode chordNode = 1;
}

// ----------------------------------------------------
message NotifyRequestWIKI {
  ChordNode chordNode = 1;
}

message NotifyReplyWIKI {

}

// ----------------------------------------------------
message PingNodeRequestWIKI {
  bool isAlive = 1;
}

message PingNodeReplyWIKI {
  bool isAlive = 1;
}

// ----------------------------------------------------
message GetPredecessorRequestWIKI {

}

message GetPredecessorReplyWIKI {
  ChordNode chordNode = 1;
}

// ----------------------------------------------------
message SetPredecessorsSuccessorRequestWIKI {
  ChordNode chordNode = 1;
}

message SetPredecessorsSuccessorReplyWIKI {
}
// ----------------------------------------------------
message SetSuccessorsPredecessorRequestWIKI {
  ChordNode chordNode = 1;
}

message SetSuccessorsPredecessorReplyWIKI {
}

// ----------------------------------------------------
// Chord messages
// ----------------------------------------------------
message ChordNode {
  string ip = 1;
  uint64 port = 2;
  uint64 identifier = 3;
  uint64 m = 4;
  ChordNode successor = 5;
  ChordNode predecessor = 6;
}

// ----------------------------------------------------
// Requests and replies definitions for File service
// ----------------------------------------------------

// ----------------------------------------------------
message FileChunk {
  bytes content = 1;
  MediaInfo mediaInfo = 2;
}

message UploadStatus {
  string message = 1;
  bool success = 2;
}

message DownloadRequest {
  string identifierString = 1;
}

message DeleteRequest {
  string identifierString = 1;
}

message DeleteStatus {
  string message = 1;
  bool success = 2;
}

message ListAllSongsRequest {
  string ip = 1;
  uint64 port = 2;
  uint64 identifier = 3;
}

message ListAllSongsReply {
  repeated MediaInfo mediaInfos = 1;
}

message ListNodeSongsRequest {

}

message ListNodeSongsReply {
  repeated MediaInfo mediaInfos = 1;
}

// ----------------------------------------------------
// File service messages
// ----------------------------------------------------

message MediaInfo {
  string artist = 1;
  string song = 2;
  string album = 3;
  uint32 duration = 4;
  string genre = 5;
  uint64 size = 6;
}